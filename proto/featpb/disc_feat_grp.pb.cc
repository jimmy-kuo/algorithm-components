// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: featpb/disc_feat_grp.proto

#include "featpb/disc_feat_grp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace algocomp {
class DiscFeatGrp_FeatsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DiscFeatGrp_FeatsEntry_DoNotUse>
      _instance;
} _DiscFeatGrp_FeatsEntry_DoNotUse_default_instance_;
class DiscFeatGrpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DiscFeatGrp>
      _instance;
} _DiscFeatGrp_default_instance_;
}  // namespace algocomp
namespace protobuf_featpb_2fdisc_5ffeat_5fgrp_2eproto {
void InitDefaultsDiscFeatGrp_FeatsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_featpb_2fdisc_5ffeat_5fdata_2eproto::InitDefaultsDiscFeatData();
  {
    void* ptr = &::algocomp::_DiscFeatGrp_FeatsEntry_DoNotUse_default_instance_;
    new (ptr) ::algocomp::DiscFeatGrp_FeatsEntry_DoNotUse();
  }
  ::algocomp::DiscFeatGrp_FeatsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsDiscFeatGrp_FeatsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDiscFeatGrp_FeatsEntry_DoNotUseImpl);
}

void InitDefaultsDiscFeatGrpImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_featpb_2fdisc_5ffeat_5fgrp_2eproto::InitDefaultsDiscFeatGrp_FeatsEntry_DoNotUse();
  {
    void* ptr = &::algocomp::_DiscFeatGrp_default_instance_;
    new (ptr) ::algocomp::DiscFeatGrp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::algocomp::DiscFeatGrp::InitAsDefaultInstance();
}

void InitDefaultsDiscFeatGrp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDiscFeatGrpImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algocomp::DiscFeatGrp_FeatsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algocomp::DiscFeatGrp_FeatsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algocomp::DiscFeatGrp_FeatsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algocomp::DiscFeatGrp_FeatsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algocomp::DiscFeatGrp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::algocomp::DiscFeatGrp, feats_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::algocomp::DiscFeatGrp_FeatsEntry_DoNotUse)},
  { 9, -1, sizeof(::algocomp::DiscFeatGrp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::algocomp::_DiscFeatGrp_FeatsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::algocomp::_DiscFeatGrp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "featpb/disc_feat_grp.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032featpb/disc_feat_grp.proto\022\010algocomp\032\033"
      "featpb/disc_feat_data.proto\"\204\001\n\013DiscFeat"
      "Grp\022/\n\005feats\030\001 \003(\0132 .algocomp.DiscFeatGr"
      "p.FeatsEntry\032D\n\nFeatsEntry\022\013\n\003key\030\001 \001(\t\022"
      "%\n\005value\030\002 \001(\0132\026.algocomp.DiscFeatData:\002"
      "8\001B\036\n\010algocompB\rDiscFeatGrpPbP\001\370\001\001b\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "featpb/disc_feat_grp.proto", &protobuf_RegisterTypes);
  ::protobuf_featpb_2fdisc_5ffeat_5fdata_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_featpb_2fdisc_5ffeat_5fgrp_2eproto
namespace algocomp {

// ===================================================================

DiscFeatGrp_FeatsEntry_DoNotUse::DiscFeatGrp_FeatsEntry_DoNotUse() {}
DiscFeatGrp_FeatsEntry_DoNotUse::DiscFeatGrp_FeatsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void DiscFeatGrp_FeatsEntry_DoNotUse::MergeFrom(const DiscFeatGrp_FeatsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata DiscFeatGrp_FeatsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_featpb_2fdisc_5ffeat_5fgrp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_featpb_2fdisc_5ffeat_5fgrp_2eproto::file_level_metadata[0];
}
void DiscFeatGrp_FeatsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void DiscFeatGrp::InitAsDefaultInstance() {
}
void DiscFeatGrp::clear_feats() {
  feats_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiscFeatGrp::kFeatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiscFeatGrp::DiscFeatGrp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_featpb_2fdisc_5ffeat_5fgrp_2eproto::InitDefaultsDiscFeatGrp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:algocomp.DiscFeatGrp)
}
DiscFeatGrp::DiscFeatGrp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feats_(arena) {
  ::protobuf_featpb_2fdisc_5ffeat_5fgrp_2eproto::InitDefaultsDiscFeatGrp();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:algocomp.DiscFeatGrp)
}
DiscFeatGrp::DiscFeatGrp(const DiscFeatGrp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feats_.MergeFrom(from.feats_);
  // @@protoc_insertion_point(copy_constructor:algocomp.DiscFeatGrp)
}

void DiscFeatGrp::SharedCtor() {
  _cached_size_ = 0;
}

DiscFeatGrp::~DiscFeatGrp() {
  // @@protoc_insertion_point(destructor:algocomp.DiscFeatGrp)
  SharedDtor();
}

void DiscFeatGrp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DiscFeatGrp::ArenaDtor(void* object) {
  DiscFeatGrp* _this = reinterpret_cast< DiscFeatGrp* >(object);
  (void)_this;
}
void DiscFeatGrp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DiscFeatGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscFeatGrp::descriptor() {
  ::protobuf_featpb_2fdisc_5ffeat_5fgrp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_featpb_2fdisc_5ffeat_5fgrp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DiscFeatGrp& DiscFeatGrp::default_instance() {
  ::protobuf_featpb_2fdisc_5ffeat_5fgrp_2eproto::InitDefaultsDiscFeatGrp();
  return *internal_default_instance();
}

DiscFeatGrp* DiscFeatGrp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DiscFeatGrp>(arena);
}

void DiscFeatGrp::Clear() {
// @@protoc_insertion_point(message_clear_start:algocomp.DiscFeatGrp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feats_.Clear();
  _internal_metadata_.Clear();
}

bool DiscFeatGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:algocomp.DiscFeatGrp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .algocomp.DiscFeatData> feats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DiscFeatGrp_FeatsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              DiscFeatGrp_FeatsEntry_DoNotUse,
              ::std::string, ::algocomp::DiscFeatData,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatData > > parser(&feats_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "algocomp.DiscFeatGrp.FeatsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:algocomp.DiscFeatGrp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:algocomp.DiscFeatGrp)
  return false;
#undef DO_
}

void DiscFeatGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:algocomp.DiscFeatGrp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .algocomp.DiscFeatData> feats = 1;
  if (!this->feats().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "algocomp.DiscFeatGrp.FeatsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->feats().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->feats().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatData >::const_iterator
          it = this->feats().begin();
          it != this->feats().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DiscFeatGrp_FeatsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feats_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<DiscFeatGrp_FeatsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatData >::const_iterator
          it = this->feats().begin();
          it != this->feats().end(); ++it) {
        entry.reset(feats_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:algocomp.DiscFeatGrp)
}

::google::protobuf::uint8* DiscFeatGrp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:algocomp.DiscFeatGrp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .algocomp.DiscFeatData> feats = 1;
  if (!this->feats().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "algocomp.DiscFeatGrp.FeatsEntry.key");
      }
    };

    if (deterministic &&
        this->feats().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->feats().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatData >::const_iterator
          it = this->feats().begin();
          it != this->feats().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DiscFeatGrp_FeatsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feats_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<DiscFeatGrp_FeatsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatData >::const_iterator
          it = this->feats().begin();
          it != this->feats().end(); ++it) {
        entry.reset(feats_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:algocomp.DiscFeatGrp)
  return target;
}

size_t DiscFeatGrp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:algocomp.DiscFeatGrp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .algocomp.DiscFeatData> feats = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->feats_size());
  {
    ::google::protobuf::scoped_ptr<DiscFeatGrp_FeatsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatData >::const_iterator
        it = this->feats().begin();
        it != this->feats().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(feats_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscFeatGrp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:algocomp.DiscFeatGrp)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscFeatGrp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DiscFeatGrp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:algocomp.DiscFeatGrp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:algocomp.DiscFeatGrp)
    MergeFrom(*source);
  }
}

void DiscFeatGrp::MergeFrom(const DiscFeatGrp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:algocomp.DiscFeatGrp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feats_.MergeFrom(from.feats_);
}

void DiscFeatGrp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:algocomp.DiscFeatGrp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscFeatGrp::CopyFrom(const DiscFeatGrp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:algocomp.DiscFeatGrp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscFeatGrp::IsInitialized() const {
  return true;
}

void DiscFeatGrp::Swap(DiscFeatGrp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DiscFeatGrp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DiscFeatGrp::UnsafeArenaSwap(DiscFeatGrp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DiscFeatGrp::InternalSwap(DiscFeatGrp* other) {
  using std::swap;
  feats_.Swap(&other->feats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiscFeatGrp::GetMetadata() const {
  protobuf_featpb_2fdisc_5ffeat_5fgrp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_featpb_2fdisc_5ffeat_5fgrp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace algocomp

// @@protoc_insertion_point(global_scope)
