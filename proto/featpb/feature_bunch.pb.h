// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: featpb/feature_bunch.proto

#ifndef PROTOBUF_featpb_2ffeature_5fbunch_2eproto__INCLUDED
#define PROTOBUF_featpb_2ffeature_5fbunch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "featpb/cont_feat_grp.pb.h"
#include "featpb/disc_feat_grp.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_featpb_2ffeature_5fbunch_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFeatureBunch_DiscFeatsEntry_DoNotUseImpl();
void InitDefaultsFeatureBunch_DiscFeatsEntry_DoNotUse();
void InitDefaultsFeatureBunch_ContFeatsEntry_DoNotUseImpl();
void InitDefaultsFeatureBunch_ContFeatsEntry_DoNotUse();
void InitDefaultsFeatureBunchImpl();
void InitDefaultsFeatureBunch();
inline void InitDefaults() {
  InitDefaultsFeatureBunch_DiscFeatsEntry_DoNotUse();
  InitDefaultsFeatureBunch_ContFeatsEntry_DoNotUse();
  InitDefaultsFeatureBunch();
}
}  // namespace protobuf_featpb_2ffeature_5fbunch_2eproto
namespace algocomp {
class FeatureBunch;
class FeatureBunchDefaultTypeInternal;
extern FeatureBunchDefaultTypeInternal _FeatureBunch_default_instance_;
class FeatureBunch_ContFeatsEntry_DoNotUse;
class FeatureBunch_ContFeatsEntry_DoNotUseDefaultTypeInternal;
extern FeatureBunch_ContFeatsEntry_DoNotUseDefaultTypeInternal _FeatureBunch_ContFeatsEntry_DoNotUse_default_instance_;
class FeatureBunch_DiscFeatsEntry_DoNotUse;
class FeatureBunch_DiscFeatsEntry_DoNotUseDefaultTypeInternal;
extern FeatureBunch_DiscFeatsEntry_DoNotUseDefaultTypeInternal _FeatureBunch_DiscFeatsEntry_DoNotUse_default_instance_;
}  // namespace algocomp
namespace algocomp {

// ===================================================================

class FeatureBunch_DiscFeatsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<FeatureBunch_DiscFeatsEntry_DoNotUse, 
    ::std::string, ::algocomp::DiscFeatGrp,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<FeatureBunch_DiscFeatsEntry_DoNotUse, 
    ::std::string, ::algocomp::DiscFeatGrp,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FeatureBunch_DiscFeatsEntry_DoNotUse();
  FeatureBunch_DiscFeatsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const FeatureBunch_DiscFeatsEntry_DoNotUse& other);
  static const FeatureBunch_DiscFeatsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FeatureBunch_DiscFeatsEntry_DoNotUse*>(&_FeatureBunch_DiscFeatsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class FeatureBunch_ContFeatsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<FeatureBunch_ContFeatsEntry_DoNotUse, 
    ::std::string, ::algocomp::ContFeatGrp,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<FeatureBunch_ContFeatsEntry_DoNotUse, 
    ::std::string, ::algocomp::ContFeatGrp,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FeatureBunch_ContFeatsEntry_DoNotUse();
  FeatureBunch_ContFeatsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const FeatureBunch_ContFeatsEntry_DoNotUse& other);
  static const FeatureBunch_ContFeatsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FeatureBunch_ContFeatsEntry_DoNotUse*>(&_FeatureBunch_ContFeatsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class FeatureBunch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:algocomp.FeatureBunch) */ {
 public:
  FeatureBunch();
  virtual ~FeatureBunch();

  FeatureBunch(const FeatureBunch& from);

  inline FeatureBunch& operator=(const FeatureBunch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeatureBunch(FeatureBunch&& from) noexcept
    : FeatureBunch() {
    *this = ::std::move(from);
  }

  inline FeatureBunch& operator=(FeatureBunch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureBunch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureBunch* internal_default_instance() {
    return reinterpret_cast<const FeatureBunch*>(
               &_FeatureBunch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(FeatureBunch* other);
  void Swap(FeatureBunch* other);
  friend void swap(FeatureBunch& a, FeatureBunch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureBunch* New() const PROTOBUF_FINAL { return New(NULL); }

  FeatureBunch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FeatureBunch& from);
  void MergeFrom(const FeatureBunch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FeatureBunch* other);
  protected:
  explicit FeatureBunch(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .algocomp.DiscFeatGrp> disc_feats = 1;
  int disc_feats_size() const;
  void clear_disc_feats();
  static const int kDiscFeatsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatGrp >&
      disc_feats() const;
  ::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatGrp >*
      mutable_disc_feats();

  // map<string, .algocomp.ContFeatGrp> cont_feats = 2;
  int cont_feats_size() const;
  void clear_cont_feats();
  static const int kContFeatsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::algocomp::ContFeatGrp >&
      cont_feats() const;
  ::google::protobuf::Map< ::std::string, ::algocomp::ContFeatGrp >*
      mutable_cont_feats();

  // @@protoc_insertion_point(class_scope:algocomp.FeatureBunch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      FeatureBunch_DiscFeatsEntry_DoNotUse,
      ::std::string, ::algocomp::DiscFeatGrp,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > disc_feats_;
  ::google::protobuf::internal::MapField<
      FeatureBunch_ContFeatsEntry_DoNotUse,
      ::std::string, ::algocomp::ContFeatGrp,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > cont_feats_;
  mutable int _cached_size_;
  friend struct ::protobuf_featpb_2ffeature_5fbunch_2eproto::TableStruct;
  friend void ::protobuf_featpb_2ffeature_5fbunch_2eproto::InitDefaultsFeatureBunchImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FeatureBunch

// map<string, .algocomp.DiscFeatGrp> disc_feats = 1;
inline int FeatureBunch::disc_feats_size() const {
  return disc_feats_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatGrp >&
FeatureBunch::disc_feats() const {
  // @@protoc_insertion_point(field_map:algocomp.FeatureBunch.disc_feats)
  return disc_feats_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::algocomp::DiscFeatGrp >*
FeatureBunch::mutable_disc_feats() {
  // @@protoc_insertion_point(field_mutable_map:algocomp.FeatureBunch.disc_feats)
  return disc_feats_.MutableMap();
}

// map<string, .algocomp.ContFeatGrp> cont_feats = 2;
inline int FeatureBunch::cont_feats_size() const {
  return cont_feats_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::algocomp::ContFeatGrp >&
FeatureBunch::cont_feats() const {
  // @@protoc_insertion_point(field_map:algocomp.FeatureBunch.cont_feats)
  return cont_feats_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::algocomp::ContFeatGrp >*
FeatureBunch::mutable_cont_feats() {
  // @@protoc_insertion_point(field_mutable_map:algocomp.FeatureBunch.cont_feats)
  return cont_feats_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace algocomp

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_featpb_2ffeature_5fbunch_2eproto__INCLUDED
